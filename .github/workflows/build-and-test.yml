name: Build and Test

# Trigger the workflow on push events to main or master branches
on:
  push:
    branches:
      - main
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-22.04  # Specify the exact Ubuntu version for consistency

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Cache CMake and Qt Dependencies
      - name: Cache CMake and Qt
        uses: actions/cache@v3
        with:
          path: |
            ~/.cmake
            ~/.cache
          key: ${{ runner.os }}-cmake-qt-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-qt-

      # Step 3: Install Dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            qt6-base-dev \
            qt6-tools-dev \
            qt6-tools-dev-tools \
            libgl1-mesa-dev \
            xvfb

      # Step 4: Verify Qt6 Installation
      - name: Verify Qt6 Installation
        run: |
          # Check if qmake6 is available
          if command -v qmake6 >/dev/null 2>&1; then
            echo "qmake6 is installed."
            qmake6 --version
          else
            echo "qmake6 is not found. Listing available qmake binaries:"
            ls /usr/lib/qt6/bin/
            exit 1
          fi

      # Step 5: Configure CMake
      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..

      # Step 6: Build the Project
      - name: Build
        run: |
          cd build
          cmake --build -- -j$(nproc)

      # Step 7: Run the Application with Xvfb
      - name: Run the application with Xvfb
        run: |
          cd build
          # Start Xvfb in the background
          Xvfb :99 -screen 0 1024x768x24 &
          export DISPLAY=:99
          
          # Run the application in the background and redirect output to a log file
          ./FullScreen-Pencil-Draw > app_output.log 2>&1 &
          APP_PID=$!
          echo "Application PID: $APP_PID"
          
          # Wait for 10 seconds
          sleep 10
          
          # Check if the application is still running
          if ps -p $APP_PID > /dev/null
          then
            echo "Application is still running. Terminating it."
            kill $APP_PID
          else
            echo "Application exited before 10 seconds."
          fi
          
          # Check the log file for any errors
          if grep -i "error" app_output.log
          then
            echo "Errors detected in application output."
            exit 1
          else
            echo "No errors found in application output."
          fi

      # Step 8: Upload Logs if the Previous Step Failed
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: application-logs
          path: build/app_output.log
